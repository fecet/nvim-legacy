"  __  ____   __  _   ___     _____ __  __ ____   ____
" |  \/  \ \ / / | \ | \ \   / /_ _|  \/  |  _ \ / ___|
" | |\/| |\ V /  |  \| |\ \ / / | || |\/| | |_) | |
" | |  | | | |   | |\  | \ V /  | || |  | |  _ <| |___
" |_|  |_| |_|   |_| \_|  \_/  |___|_|  |_|_| \_\\____|

" ===
" === Auto load for first time uses
" ===
if empty(glob('~/.config/nvim/autoload/plug.vim'))
	silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	"autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" ===
" === Create a _machine_specific.vim file to adjust machine specific stuff, like python interpreter location
" ===
let has_machine_specific_file = 1
if empty(glob('~/.config/nvim/_machine_specific.vim'))
	let has_machine_specific_file = 0
	silent! exec "!cp ~/.config/nvim/Diff_machine_configs/_machine_specific_default.vim ~/.config/nvim/_machine_specific.vim"
endif
source ~/.config/nvim/_machine_specific.vim

" ====================
" === Editor Setup ===
" ====================
" ===
" === System
" ===

"let g:clipboard = {
"          \   'name': 'win32yank-wsl',
"          \   'copy': {
"          \      '+': 'win32yank.exe -i --crlf',
"          \      '*': 'win32yank.exe -i --crlf',
"          \    },
"          \   'paste': {
"          \      '+': 'win32yank.exe -o --lf',
"          \      '*': 'win32yank.exe -o --lf',
"          \   },
"          \   'cache_enabled': 0,
"          \ }
"set modifiable

" ===
" === Editor behavior
" ===

"autocmd BufNewFile,BufRead *.vim setlocal noexpandtab tabstop=2 softtabstop=2 shiftwidth=2
"autocmd BufNewFile,BufRead *.json setlocal noexpandtab tabstop=2 softtabstop=2 shiftwidth=2
" autocmd FileType c :set autowrite
"
"au Filetype *.rmd setf markdown
"autocmd BufNewFile,BufRead *.c setlocal noexpandtab tabstop=4 softtabstop=4 shiftwidth=4
" # Function to permanently delete views created by 'mkview'
function! MyDeleteView()
    let path = fnamemodify(bufname('%'),':p')
    " vim's odd =~ escaping for /
    let path = substitute(path, '=', '==', 'g')
    if empty($HOME)
    else
        let path = substitute(path, '^'.$HOME, '\~', '')
    endif
    let path = substitute(path, '/', '=+', 'g') . '='
    " view directory
    let path = &viewdir.'/'.path
    call delete(path)
    echo "Deleted: ".path
endfunction

" # Command Delview (and it's abbreviation 'delview')
command Delview call MyDeleteView()
" Lower-case user commands: http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
cabbrev delview <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Delview' : 'delview')<CR>
    

" ===
" === Terminal Behaviors
" ===
"let g:neoterm_autoscroll = 1
"autocmd TermOpen term://* startinsert
" tnoremap <C-N> <C-\><C-N>
"tnoremap <C-O> <C-\><C-N><C-O>

" ===
" === Basic Mappings
" ===

" Set <LEADER> as <SPACE>




"  ____  _             _          ____             __ _
" |  _ \| |_   _  __ _(_)_ __    / ___|___  _ __  / _(_) __ _
" | |_) | | | | |/ _` | | '_ \  | |   / _ \| '_ \| |_| |/ _` |
" |  __/| | |_| | (_| | | | | | | |__| (_) | | | |  _| | (_| |
" |_|   |_|\__,_|\__, |_|_| |_|  \____\___/|_| |_|_| |_|\__, |
"                |___/                                  |___/



" ===
" === Dress up my vim
" ===


if exists('g:vscode')
		
    " VSCode extension
		call plug#begin('~/.config/nvim/plugged')
		Plug 'gibiansky/vim-latex-objects'

		Plug 'gcmt/wildfire.vim'
		" This selects the next closest text object.
		map ' <Plug>(wildfire-fuel)
		" This selects the previous closest text object.
		vmap " <Plug>(wildfire-water)
		" use '*' to mean 'all other filetypes'
		" in this example, html and xml share the same text objects
		xnoremap <silent> im <ESC>:call SelectInMath(0)<CR>
		xnoremap <silent> am <ESC>:call SelectInMath(1)<CR>
		let g:wildfire_objects = {
				\ "*" : ["iw","i'", 'i"', "i)", "i]", "i}","im","am"],
				\ "html,xml" : ["at", "it"],
		\ }

		Plug 'machakann/vim-sandwich'

"		Plug 'SirVer/ultisnips'
"		let g:UltiSnipsExpandTrigger="<tab>"
"		let g:UltiSnipsJumpForwardTrigger="<tab>"
"		let g:UltiSnipsJumpBackwardTrigger="<S-tab>"
"		let g:UltiSnipsEditSplit="vertical"
		Plug 'fecet/vim-snippets'

		Plug 'asvetliakov/vim-easymotion'
		nmap s <Plug>(easymotion-s2)
		nmap t <Plug>(easymotion-t2)

		" Move to line
		map <Leader>l <Plug>(easymotion-lineforward)
		map <Leader>j <Plug>(easymotion-j)
		map <Leader>k <Plug>(easymotion-k)
    map <Leader>h <Plug>(easymotion-linebackward)

		call plug#end()
else
		
		
        lua require('tmp')
		call plug#begin('~/.config/nvim/plugged')

		"===============================================================

		" Plug 'gibiansky/vim-latex-objects'
		" Plug 'gcmt/wildfire.vim'

		" Plug 'machakann/vim-sandwich'

		" Plug 'kevinhwang91/rnvimr'

	" Make Ranger replace Netrw and be the file explorer

		"Plug 'SirVer/ultisnips', { 'for': ['rmd','markdown'] }
		" Plug 'SirVer/ultisnips'
		" Plug 'fecet/vim-snippets'
		"Plug 'jiangmiao/auto-pairs'


		function! Ulti_Pairs()
				call UltiSnips#ExpandSnippetOrJump()
				if g:ulti_expand_or_jump_res == 0
						call AutoPairsJump()
				endif
		endfunction


		Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug','rmd']}

		"Plug 'ZSaberLv0/ZFVimIM'
		"Plug 'ZSaberLv0/ZFVimJob'
		"Plug 'ZSaberLv0/ZFVimGitUtil' " 可选, 如果你希望定期自动清理词库 push 历史
		"Plug 'fecet/ZFVimIM_pinyin_base' " 你的词库
		"Plug 'ZSaberLv0/ZFVimIM_openapi' 

		"let g:zf_git_user_email='xiezej@gmail.com'
		"let g:zf_git_user_name='fecet'
		"let g:zf_git_user_token='2520f5f8e841651f1b5295170d2461ac49b8c859'

		"Plug 'itchyny/lightline.vim'
			"let g:lightline = {
			"\ 'colorscheme': 'dracula',
			"\ }
		"Plug 'glepnir/galaxyline.nvim' , {'branch': 'main'}
		" If you want to display icons, then use one of these plugins:
		"Plug 'kyazdani42/nvim-web-devicons' " lua

		" Plug 'lervag/vimtex'
		" Plug 'godlygeek/tabular'
		" Plug 'plasticboy/vim-markdown'

		"Plug 'machakann/vim-highlightedyank'
		" Plug 'tmhedberg/SimpylFold'


		"Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins' }
		"Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
		"Plug 'p00f/nvim-ts-rainbow'  
		"Plug 'Yggdroot/indentLine'
        ""let g:indentLine_color_gui = 0
        ""let g:indentLine_setColors = 0
        ""let g:indentLine_defaultGroup = 'SpecialKey'
				"let g:indentLine_color_gui = '#6272a4'
				"let g:indentLine_char_list = ['|', '¦', '┆', '┊']

		"Plug 'preservim/nerdcommenter' 

		" Plug 'crusoexia/vim-monokai'
		" Plug 'wadackel/vim-dogrun'
		" Plug 'dracula/vim', { 'as': 'dracula' }

		" Plug 'neoclide/coc.nvim', {'branch': 'release'}

		" Plug 'adavidwilson/vim-slime'
		" Plug 'hanschen/vim-ipython-cell', { 'for': 'python' }

		" Plug 'bfredl/nvim-ipy'

		" Plug 'glacambre/firenvim', { 'do': { _ -> firenvim#install(0) } }
			

		call plug#end()

		"source ~/.config/nvim/coc.vim
		"lua require('plugins.treesitter')


endif


